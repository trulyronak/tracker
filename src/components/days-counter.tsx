'use client';
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Q7KrHphj5y9
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { Rethink_Sans } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button";
import { useCopyToClipboard } from "@uidotdev/usehooks";
import { useRouter } from "next/navigation";
import dayjs from 'dayjs'
import duration from 'dayjs/plugin/duration'
import relativeTime from "dayjs/plugin/relativeTime";
import { useCallback, useEffect, useMemo, useState } from "react";
import Countdown from "react-countdown";

dayjs.extend(duration);
dayjs.extend(relativeTime);

function formatDuration(duration: duration.Duration) {
    let formattedDuration = '';

    const years = duration.years();
    const days = duration.days();
    const hours = duration.hours();
    const minutes = duration.minutes();
    const seconds = duration.seconds();

    if (years > 0) {
        formattedDuration += `${years} year${years > 1 ? 's' : ''}, `;
    }
    if (days > 0) {
        formattedDuration += `${days} day${days > 1 ? 's' : ''}, `;
    }
    if (hours > 0) {
        formattedDuration += `${hours} hour${hours > 1 ? 's' : ''}`;
        if (seconds > 0 || minutes > 0) {
            formattedDuration += `, `;
        }
    }
    if (minutes > 0) {
        formattedDuration += `${minutes} minute${minutes > 1 ? 's' : ''}`;
        if (seconds > 0) {
            formattedDuration += `, `;
        }
    }
    if (seconds > 0) {
        formattedDuration += `${seconds} second${seconds > 1 ? 's' : ''}`;
    }

    return formattedDuration;
}

export function DaysCounter({
  date,
  setDate,
}: {
  date: Date;
  setDate: (newDate: Date) => void;
}) {
  const [, copyToClipboard] = useCopyToClipboard();

  const [timePassedText, setTimePassedText] = useState(
    formatDuration(dayjs.duration(dayjs().diff(dayjs(date))))
  );
  const updateTime = useCallback(() => {
    const difference = formatDuration(dayjs.duration(dayjs().diff(dayjs(date))))
    setTimePassedText(difference)
  }, [date]);

  useEffect(() => {
    const intervalId = setInterval(updateTime, 1000)
    return () => clearInterval(intervalId)
  }, [updateTime]);


  return (
    <main className="flex flex-col items-center justify-center h-screen bg-gray-900 text-white">
      <div className="text-center space-y-4">
        <h1 className="text-6xl font-bold">
          <span className="text-[#FF6B6B]" />
          {timePassedText}
        </h1>
        <p className="text-lg text-gray-400">
          Since you started tracking
        </p>
        <div className="flex gap-4 justify-center">
          <Button
            className="bg-[#FF6B6B] hover:bg-[#ff5252] text-white font-bold py-2 px-4 rounded"
            onClick={() => setDate(new Date())}
          >
            Reset to today
          </Button>
          <Button
            className="bg-green-500 hover:bg-[#ff5252] text-white font-bold py-2 px-4 rounded"
            onClick={() => copyToClipboard(window.location.href)}
          >
            Save link to clipboard
          </Button>
        </div>
      </div>
    </main>
  );
}
